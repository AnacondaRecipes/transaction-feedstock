{% set name = "transaction" %}
{% set version = "5.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 106e7bd782bcc0cb5119fc9225b0c9a71dfc53adb938be905223adaef22b1174

build:
  script: {{ PYTHON }} -m pip install . --no-deps --no-build-isolation -vv
  number: 0
  skip: true  # [py<38]

requirements:
  host:
    - python
    - pip
    - setuptools <74
  run:
    - python
    - zope.interface

# from .. import interfaces
# E   ImportError: attempted relative import beyond top-level package
{% set ignore_tests = " --ignore=src/transaction/tests/test__manager.py" %}

test:
  source_files:
    - src/transaction/tests
  imports:
    - transaction
    - transaction._manager
    - transaction._transaction
    - transaction.interfaces
    - transaction.weakset
  commands:
    - pip check
    - python -c "from importlib.metadata import version; assert(version('{{ name }}')=='{{ version }}')"
    - pytest -v src/transaction/tests {{ ignore_tests }}
  requires:
    - pip
    - pytest

about:
  home: https://github.com/zopefoundation/transaction
  license_file: LICENSE.txt
  license: ZPL-2.1
  license_family: Other
  summary: Transaction management for Python
  description: |
    A transaction consists of one or more operations that we want to perform
    as a single action. It's an all or nothing proposition: either all the
    operations that are part of the transaction are completed successfully or
    none of them have any effect. In the transaction package, a transaction
    object represents a running transaction that can be committed or aborted
    in the end.
  dev_url: https://github.com/zopefoundation/transaction
  doc_url: https://transaction.readthedocs.io

extra:
  recipe-maintainers:
    - pmlandwehr
    - nehaljwani
